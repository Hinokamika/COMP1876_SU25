<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/COMPLETE_SYSTEM_EXPLANATION.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/COMPLETE_SYSTEM_EXPLANATION.txt" />
              <option name="updatedContent" value="================================================================================&#10;                    COMPLETE ANDROID GYM MANAGEMENT SYSTEM EXPLANATION&#10;                           COMP1876 SU25 - COMPREHENSIVE ANALYSIS&#10;================================================================================&#10;&#10;TABLE OF CONTENTS:&#10;1. SYSTEM OVERVIEW &amp; ARCHITECTURE&#10;2. PROJECT STRUCTURE &amp; FILE ORGANIZATION&#10;3. APPLICATION FLOW &amp; NAVIGATION&#10;4. AUTHENTICATION SYSTEM&#10;5. DATA MANAGEMENT &amp; FIREBASE INTEGRATION&#10;6. USER INTERFACE COMPONENTS&#10;7. CRUD OPERATIONS DETAILED ANALYSIS&#10;8. STATE MANAGEMENT PATTERNS&#10;9. COMPONENT INTERACTIONS&#10;10. DETAILED CODE EXPLANATIONS&#10;11. FEATURE DEMONSTRATIONS&#10;12. TROUBLESHOOTING &amp; ERROR ANALYSIS&#10;&#10;================================================================================&#10;1. SYSTEM OVERVIEW &amp; ARCHITECTURE&#10;================================================================================&#10;&#10;PROJECT TYPE: Android Mobile Application&#10;FRAMEWORK: Jetpack Compose (Modern Android UI Toolkit)&#10;BACKEND: Firebase (Authentication + Firestore Database)&#10;ARCHITECTURE PATTERN: MVVM (Model-View-ViewModel)&#10;PROGRAMMING LANGUAGE: Kotlin&#10;TARGET: Gym/Fitness Center Management&#10;&#10;CORE ENTITIES MANAGED:&#10;- Classes: Gym class schedules, types, and details&#10;- Teachers: Instructor profiles and assignments&#10;- Users: Member/student information and enrollment&#10;- Courses: Detailed class information and schedules&#10;&#10;MAIN FEATURES:&#10;✓ User Authentication (Login/Signup with Firebase Auth)&#10;✓ Real-time Data Synchronization with Firestore&#10;✓ Complete CRUD Operations for all entities&#10;✓ Tab-based Navigation System&#10;✓ Search and Filter Functionality&#10;✓ Responsive Material Design 3 UI&#10;✓ Offline-capable with Firebase caching&#10;&#10;================================================================================&#10;2. PROJECT STRUCTURE &amp; FILE ORGANIZATION&#10;================================================================================&#10;&#10;ROOT DIRECTORY STRUCTURE:&#10;/app&#10;  /src/main/java/com/example/comp1786_su25/&#10;    ├── MainActivity.kt                    [App Entry Point]&#10;    ├── MyAppNavigation.kt                [Navigation Controller]&#10;    ├── AuthViewModel.kt                  [Authentication Logic]&#10;    │&#10;    ├── /pages/                           [Main Application Pages]&#10;    │   ├── IntroPage.kt                  [Landing Page]&#10;    │   ├── LoginPage.kt                  [User Login]&#10;    │   ├── SignupPage.kt                 [User Registration]&#10;    │   └── HomePage.kt                   [Main Dashboard]&#10;    │&#10;    ├── /Site_pages/                      [Entity Management Pages]&#10;    │   ├── ClassPage.kt                  [Class Management]&#10;    │   ├── TeacherPage.kt                [Teacher Management]&#10;    │   └── UserPage.kt                   [User Management]&#10;    │&#10;    ├── /functionPages/                   [CRUD Operations]&#10;    │   ├── /Class/&#10;    │   │   ├── AddClassScreen.kt         [Add New Class]&#10;    │   │   └── UpdateClassScreen.kt      [Edit Existing Class]&#10;    │   ├── /Teacher/&#10;    │   │   ├── AddTeacherScreen.kt       [Add New Teacher]&#10;    │   │   ├── UpdateTeacherScreen.kt    [Edit Teacher Info]&#10;    │   │   └── TeacherDetailsDialog.kt   [Teacher Details Modal]&#10;    │   ├── /User/&#10;    │   │   ├── UpdateUserDialog.kt       [Edit User Info]&#10;    │   │   └── UserDetailDialog.kt       [User Details Modal]&#10;    │   └── /Courses/&#10;    │       ├── AddClassDetailScreen.kt   [Add Course Details]&#10;    │       ├── UpdateClassDetailScreen.kt[Edit Course Details]&#10;    │       └── ClassDetailsDialog.kt     [Course Details Modal]&#10;    │&#10;    ├── /controllers/                     [Data Repository Layer]&#10;    │   ├── classFirebaseRepository.kt    [Class Data Operations]&#10;    │   ├── teacherFirebaseRepository.kt  [Teacher Data Operations]&#10;    │   └── userFirebaseRepository.kt     [User Data Operations]&#10;    │&#10;    ├── /components/                      [Reusable UI Components]&#10;    ├── /tabview/                         [Tab Navigation Components]&#10;    │   └── TabView.kt                    [Bottom Tab Bar]&#10;    └── /ui/theme/                        [App Theming]&#10;        ├── Color.kt                      [Color Definitions]&#10;        ├── Theme.kt                      [Material Theme Setup]&#10;        └── Type.kt                       [Typography Settings]&#10;&#10;================================================================================&#10;3. APPLICATION FLOW &amp; NAVIGATION&#10;================================================================================&#10;&#10;APPLICATION STARTUP SEQUENCE:&#10;1. MainActivity.onCreate() → Initializes app&#10;2. AuthViewModel.init() → Checks Firebase auth status&#10;3. MyAppNavigation → Routes based on authentication state&#10;4. If authenticated → HomePage (Tab Navigation)&#10;5. If not authenticated → IntroPage&#10;&#10;NAVIGATION HIERARCHY:&#10;&#10;LEVEL 1 - AUTHENTICATION FLOW:&#10;&quot;intro&quot; ──→ &quot;login&quot; ──→ &quot;home&quot;&#10;    │           │&#10;    └──→ &quot;signup&quot; ──┘&#10;&#10;LEVEL 2 - TAB NAVIGATION (Inside HomePage):&#10;Tab 1: Classes  ──→ ClassPage&#10;Tab 2: Teachers ──→ TeacherPage  &#10;Tab 3: Users    ──→ UserPage&#10;&#10;LEVEL 3 - CRUD OPERATIONS:&#10;From ClassPage:&#10;├── &quot;addclass&quot; → AddClassScreen&#10;├── &quot;updateclass/{classId}&quot; → UpdateClassScreen&#10;├── &quot;add_class_detail/{classId}/{courseId}&quot; → AddClassDetailScreen&#10;└── &quot;update_class_detail/{classId}/{courseId}/{detailId}&quot; → UpdateClassDetailScreen&#10;&#10;From TeacherPage:&#10;├── &quot;addteacher&quot; → AddTeacherScreen&#10;└── &quot;updateteacher/{teacherId}&quot; → UpdateTeacherScreen&#10;&#10;From UserPage:&#10;└── &quot;updateuser/{userId}&quot; → UpdateUserScreen&#10;&#10;PARAMETER PASSING MECHANISM:&#10;- Navigation uses type-safe parameter passing&#10;- Parameters embedded in route URLs (e.g., /updateclass/{classId})&#10;- NavType.StringType ensures type safety&#10;- Parameters extracted in destination screens via backStackEntry.arguments&#10;&#10;================================================================================&#10;4. AUTHENTICATION SYSTEM&#10;================================================================================&#10;&#10;AUTHENTICATION ARCHITECTURE:&#10;Firebase Authentication → AuthViewModel → UI State Updates&#10;&#10;AUTHVIEWMODEL.KT DETAILED BREAKDOWN:&#10;&#10;CLASS STRUCTURE:&#10;```&#10;class AuthViewModel : ViewModel() {&#10;    private val auth: FirebaseAuth = FirebaseAuth.getInstance()&#10;    private val _authState = MutableLiveData&lt;AuthState&gt;()&#10;    val authState: LiveData&lt;AuthState&gt; = _authState&#10;}&#10;```&#10;&#10;AUTHENTICATION STATES:&#10;- AuthState.Unauthenticated: User not logged in&#10;- AuthState.Authenticated: User successfully logged in&#10;- AuthState.Loading: Authentication in progress&#10;- AuthState.Error(message): Authentication failed with error&#10;&#10;AUTHENTICATION METHODS:&#10;&#10;1. checkAuthStatus():&#10;   - Called on ViewModel initialization&#10;   - Checks if Firebase user exists&#10;   - Sets initial authentication state&#10;&#10;2. login(email: String, password: String):&#10;   - Validates input fields (empty check)&#10;   - Sets loading state&#10;   - Calls Firebase signInWithEmailAndPassword&#10;   - Updates state based on success/failure&#10;&#10;3. signup(email: String, password: String):&#10;   - Similar to login but creates new account&#10;   - Uses Firebase createUserWithEmailAndPassword&#10;   - Handles registration errors&#10;&#10;4. signout():&#10;   - Calls Firebase signOut()&#10;   - Resets state to Unauthenticated&#10;   - Triggers navigation back to intro&#10;&#10;SECURITY FEATURES:&#10;- Input validation before Firebase calls&#10;- Error handling with user-friendly messages&#10;- Automatic session management&#10;- Real-time authentication state monitoring&#10;&#10;================================================================================&#10;5. DATA MANAGEMENT &amp; FIREBASE INTEGRATION&#10;================================================================================&#10;&#10;FIREBASE CONFIGURATION:&#10;- google-services.json: Contains Firebase project configuration&#10;- Firestore Database: NoSQL document database for real-time data&#10;- Firebase Authentication: Handles user login/signup&#10;&#10;DATA REPOSITORY PATTERN:&#10;&#10;CLASSFIREBASEREPOSITORY.KT:&#10;```&#10;Purpose: Manages all Firebase operations for gym classes&#10;Operations:&#10;- getAllClasses(): Retrieves all classes from Firestore&#10;- addClass(class): Adds new class document&#10;- updateClass(classId, data): Updates existing class&#10;- deleteClass(classId): Removes class document&#10;- getClassById(classId): Fetches specific class&#10;```&#10;&#10;TEACHERFIREBASEREPOSITORY.KT:&#10;```&#10;Purpose: Manages teacher data operations&#10;Operations:&#10;- getAllTeachers(): Fetches all instructor profiles&#10;- addTeacher(teacher): Creates new teacher document&#10;- updateTeacher(teacherId, data): Modifies teacher info&#10;- deleteTeacher(teacherId): Removes teacher record&#10;- getTeacherById(teacherId): Gets specific teacher&#10;```&#10;&#10;USERFIREBASEREPOSITORY.KT:&#10;```&#10;Purpose: Handles user/member data management&#10;Operations:&#10;- getAllUsers(): Retrieves all user profiles&#10;- addUser(user): Creates new user document&#10;- updateUser(userId, data): Updates user information&#10;- deleteUser(userId): Removes user record&#10;- getUserById(userId): Fetches specific user&#10;```&#10;&#10;FIRESTORE DOCUMENT STRUCTURE:&#10;&#10;Classes Collection:&#10;{&#10;  &quot;id&quot;: &quot;auto-generated-id&quot;,&#10;  &quot;name&quot;: &quot;Yoga Basics&quot;,&#10;  &quot;type&quot;: &quot;Fitness&quot;,&#10;  &quot;duration&quot;: &quot;60 minutes&quot;,&#10;  &quot;capacity&quot;: 20,&#10;  &quot;description&quot;: &quot;Beginner-friendly yoga class&quot;,&#10;  &quot;teacherId&quot;: &quot;teacher-reference-id&quot;,&#10;  &quot;schedule&quot;: &quot;Monday 9:00 AM&quot;,&#10;  &quot;createdAt&quot;: &quot;timestamp&quot;,&#10;  &quot;updatedAt&quot;: &quot;timestamp&quot;&#10;}&#10;&#10;Teachers Collection:&#10;{&#10;  &quot;id&quot;: &quot;auto-generated-id&quot;,&#10;  &quot;name&quot;: &quot;John Doe&quot;,&#10;  &quot;email&quot;: &quot;john@example.com&quot;,&#10;  &quot;specialization&quot;: &quot;Yoga Instructor&quot;,&#10;  &quot;experience&quot;: &quot;5 years&quot;,&#10;  &quot;phone&quot;: &quot;+1234567890&quot;,&#10;  &quot;bio&quot;: &quot;Certified yoga instructor...&quot;,&#10;  &quot;createdAt&quot;: &quot;timestamp&quot;,&#10;  &quot;updatedAt&quot;: &quot;timestamp&quot;&#10;}&#10;&#10;Users Collection:&#10;{&#10;  &quot;id&quot;: &quot;auto-generated-id&quot;,&#10;  &quot;name&quot;: &quot;Jane Smith&quot;,&#10;  &quot;email&quot;: &quot;jane@example.com&quot;,&#10;  &quot;membershipType&quot;: &quot;Premium&quot;,&#10;  &quot;joinDate&quot;: &quot;2024-01-15&quot;,&#10;  &quot;phone&quot;: &quot;+1234567890&quot;,&#10;  &quot;emergencyContact&quot;: &quot;+0987654321&quot;,&#10;  &quot;createdAt&quot;: &quot;timestamp&quot;,&#10;  &quot;updatedAt&quot;: &quot;timestamp&quot;&#10;}&#10;&#10;REAL-TIME DATA SYNCHRONIZATION:&#10;- Firestore listeners automatically update UI when data changes&#10;- All CRUD operations trigger real-time updates across devices&#10;- Offline caching ensures app works without internet&#10;- Conflict resolution handled automatically by Firebase&#10;&#10;================================================================================&#10;6. USER INTERFACE COMPONENTS&#10;================================================================================&#10;&#10;UI ARCHITECTURE: Jetpack Compose (Declarative UI)&#10;&#10;MATERIAL DESIGN 3 IMPLEMENTATION:&#10;&#10;COLOR.KT - COLOR SCHEME:&#10;```&#10;Primary Colors: Brand identity colors&#10;Secondary Colors: Accent and supporting colors&#10;Surface Colors: Background and container colors&#10;Error Colors: Validation and error states&#10;OnPrimary/OnSecondary: Text colors for contrast&#10;```&#10;&#10;THEME.KT - THEMING SYSTEM:&#10;```&#10;Light Theme: Default daylight appearance&#10;Dark Theme: Night mode support&#10;Dynamic Colors: Android 12+ material you colors&#10;Typography: Consistent text styling&#10;Shapes: Rounded corners and elevation&#10;```&#10;&#10;TYPE.KT - TYPOGRAPHY:&#10;```&#10;Display: Large headlines and titles&#10;Headline: Section headers&#10;Title: Card titles and important text&#10;Body: Regular content text&#10;Label: Button text and small labels&#10;```&#10;&#10;COMPONENT BREAKDOWN:&#10;&#10;TABVIEW.KT - BOTTOM NAVIGATION:&#10;```&#10;Purpose: Provides tab-based navigation between main sections&#10;Features:&#10;- Three tabs: Classes, Teachers, Users&#10;- Material Design bottom navigation&#10;- Icon and text labels&#10;- Active state indication&#10;- Navigation state management&#10;```&#10;&#10;HOMEPAGE.KT - MAIN DASHBOARD:&#10;```&#10;Structure:&#10;- Scaffold with bottom navigation&#10;- Nested NavHost for tab content&#10;- LaunchedEffect for auth monitoring&#10;- Tab-specific content rendering&#10;&#10;Key Features:&#10;- Authentication state monitoring&#10;- Automatic redirect to login if session expires&#10;- Independent navigation per tab&#10;- Material Design layout&#10;```&#10;&#10;SITE PAGES UI PATTERNS:&#10;&#10;CLASSPAGE.KT INTERFACE:&#10;```&#10;Layout Structure:&#10;├── TopAppBar with title and search&#10;├── Filter/Sort options&#10;├── LazyColumn for class list&#10;│   ├── ClassCard components&#10;│   ├── Add button (FAB)&#10;│   └── Loading/Empty states&#10;└── Detail dialogs (modal)&#10;&#10;Interactive Elements:&#10;- Search functionality&#10;- Filter by class type&#10;- Sort by name/date&#10;- Pull-to-refresh&#10;- Floating Action Button for adding&#10;- Long press for context menu&#10;- Tap for details dialog&#10;```&#10;&#10;TEACHERPAGE.KT INTERFACE:&#10;```&#10;Similar structure to ClassPage:&#10;├── Teacher search and filters&#10;├── TeacherCard grid/list&#10;├── Add teacher functionality&#10;└── Teacher detail dialogs&#10;&#10;Features:&#10;- Profile photo display&#10;- Specialization badges&#10;- Experience indicators&#10;- Contact information&#10;- Assignment history&#10;```&#10;&#10;USERPAGE.KT INTERFACE:&#10;```&#10;User management interface:&#10;├── Member search functionality&#10;├── UserCard display&#10;├── Membership status indicators&#10;├── Add user capability&#10;└── User detail management&#10;&#10;Features:&#10;- Membership type badges&#10;- Join date display&#10;- Contact information&#10;- Emergency contact details&#10;- Membership renewal tracking&#10;```&#10;&#10;================================================================================&#10;7. CRUD OPERATIONS DETAILED ANALYSIS&#10;================================================================================&#10;&#10;CREATE OPERATIONS:&#10;&#10;ADDCLASSSCREEN.KT:&#10;```&#10;Purpose: Form interface for creating new gym classes&#10;UI Components:&#10;├── TextField for class name&#10;├── Dropdown for class type&#10;├── TimePicker for schedule&#10;├── NumberField for capacity&#10;├── TextArea for description&#10;├── TeacherSelector dropdown&#10;└── Save/Cancel buttons&#10;&#10;Validation:&#10;- Required field checking&#10;- Capacity limits (1-100)&#10;- Schedule conflict detection&#10;- Duplicate name prevention&#10;- Teacher availability verification&#10;&#10;Flow:&#10;1. User fills form fields&#10;2. Client-side validation&#10;3. Firebase repository call&#10;4. Success → Navigate back with success message&#10;5. Error → Display error message, keep form data&#10;```&#10;&#10;ADDTEACHERSCREEN.KT:&#10;```&#10;Teacher creation form:&#10;├── Personal information fields&#10;├── Contact details&#10;├── Specialization selection&#10;├── Experience input&#10;├── Bio text area&#10;└── Profile photo upload&#10;&#10;Validation:&#10;- Email format checking&#10;- Phone number validation&#10;- Required field verification&#10;- Duplicate email prevention&#10;```&#10;&#10;ADDCLASSDETAILSCREEN.KT:&#10;```&#10;Course detail creation:&#10;├── Class reference (passed parameter)&#10;├── Course specific information&#10;├── Schedule details&#10;├── Additional requirements&#10;└── Special instructions&#10;&#10;Parameter Flow:&#10;- Receives classId and courseId from navigation&#10;- Pre-populates related class information&#10;- Allows detailed course configuration&#10;```&#10;&#10;READ OPERATIONS:&#10;&#10;DATA FETCHING PATTERNS:&#10;```&#10;Repository Pattern Implementation:&#10;1. UI Component requests data&#10;2. Repository checks local cache&#10;3. If not cached, fetch from Firebase&#10;4. Store in local cache&#10;5. Return data to UI&#10;6. Set up real-time listener for updates&#10;&#10;Real-time Updates:&#10;- Firestore snapshot listeners&#10;- Automatic UI recomposition on data changes&#10;- Optimistic updates for better UX&#10;- Conflict resolution for concurrent edits&#10;```&#10;&#10;SEARCH AND FILTER FUNCTIONALITY:&#10;```&#10;Search Implementation:&#10;- Text input triggers filtering&#10;- Case-insensitive search&#10;- Multiple field searching (name, type, description)&#10;- Real-time results as user types&#10;- Search history for convenience&#10;&#10;Filter Options:&#10;- Class type filtering&#10;- Date range selection&#10;- Teacher assignment filtering&#10;- Capacity availability&#10;- Status filtering (active/inactive)&#10;```&#10;&#10;UPDATE OPERATIONS:&#10;&#10;UPDATECLASSSCREEN.KT:&#10;```&#10;Class editing interface:&#10;├── Pre-populated form fields&#10;├── Change tracking&#10;├── Validation on modified fields&#10;├── Conflict detection&#10;└── Save/Cancel/Delete options&#10;&#10;Update Process:&#10;1. Load existing class data&#10;2. Populate form with current values&#10;3. Track field modifications&#10;4. Validate only changed fields&#10;5. Show preview of changes&#10;6. Confirm update with user&#10;7. Apply changes to Firebase&#10;8. Navigate back with success indication&#10;```&#10;&#10;UPDATETEACHERSCREEN.KT:&#10;```&#10;Teacher profile editing:&#10;├── Editable profile information&#10;├── Contact detail updates&#10;├── Specialization modifications&#10;├── Experience tracking&#10;└── Bio updates&#10;&#10;Features:&#10;- Change confirmation dialogs&#10;- Field-level validation&#10;- Profile photo updates&#10;- Specialization badge management&#10;```&#10;&#10;UPDATEUSERSCREEN.KT:&#10;```&#10;User profile management:&#10;├── Member information editing&#10;├── Contact detail updates&#10;├── Membership type changes&#10;├── Emergency contact updates&#10;└── Membership history tracking&#10;```&#10;&#10;DELETE OPERATIONS:&#10;&#10;DELETION WORKFLOW:&#10;```&#10;Safety Measures:&#10;1. Confirmation dialog with details&#10;2. Dependency checking (references in other documents)&#10;3. Soft delete option (mark as inactive)&#10;4. Cascade delete for related data&#10;5. Undo functionality within time window&#10;6. Audit logging for accountability&#10;&#10;Cascade Rules:&#10;- Deleting teacher → Update assigned classes&#10;- Deleting class → Remove user enrollments&#10;- Deleting user → Cancel class registrations&#10;```&#10;&#10;================================================================================&#10;8. STATE MANAGEMENT PATTERNS&#10;================================================================================&#10;&#10;MVVM ARCHITECTURE IMPLEMENTATION:&#10;&#10;MODEL LAYER:&#10;```&#10;Data Classes:&#10;- Class data model&#10;- Teacher data model  &#10;- User data model&#10;- Course data model&#10;&#10;Repository Layer:&#10;- Firebase repositories for each entity&#10;- Local caching mechanisms&#10;- Data transformation logic&#10;- Error handling and retry logic&#10;```&#10;&#10;VIEW LAYER:&#10;```&#10;Compose UI Components:&#10;- Stateless composables for UI elements&#10;- State hoisting for data management&#10;- Material Design component usage&#10;- Responsive layout adaptation&#10;```&#10;&#10;VIEWMODEL LAYER:&#10;```&#10;AuthViewModel:&#10;- Authentication state management&#10;- User session handling&#10;- Login/logout operations&#10;- Error state management&#10;&#10;Entity ViewModels (if implemented):&#10;- ClassViewModel: Class data operations&#10;- TeacherViewModel: Teacher data management&#10;- UserViewModel: User data handling&#10;```&#10;&#10;STATE MANAGEMENT PATTERNS:&#10;&#10;LIVEDATA PATTERN:&#10;```&#10;Implementation:&#10;private val _authState = MutableLiveData&lt;AuthState&gt;()&#10;val authState: LiveData&lt;AuthState&gt; = _authState&#10;&#10;Usage in Compose:&#10;val authState = authViewModel.authState.observeAsState()&#10;&#10;Benefits:&#10;- Lifecycle-aware state observation&#10;- Automatic UI updates on state changes&#10;- Memory leak prevention&#10;- Thread-safe state updates&#10;```&#10;&#10;COMPOSE STATE PATTERN:&#10;```&#10;Local State Management:&#10;val (searchText, setSearchText) = remember { mutableStateOf(&quot;&quot;) }&#10;val (isLoading, setLoading) = remember { mutableStateOf(false) }&#10;&#10;Derived State:&#10;val filteredClasses by remember(searchText, allClasses) {&#10;    derivedStateOf {&#10;        allClasses.filter { it.name.contains(searchText, ignoreCase = true) }&#10;    }&#10;}&#10;&#10;Benefits:&#10;- Reactive UI updates&#10;- Automatic recomposition&#10;- Optimized re-rendering&#10;- Clean state management&#10;```&#10;&#10;ERROR HANDLING STRATEGIES:&#10;```&#10;Error State Management:&#10;sealed class AuthState {&#10;    object Unauthenticated : AuthState()&#10;    object Authenticated : AuthState()&#10;    object Loading : AuthState()&#10;    data class Error(val message: String) : AuthState()&#10;}&#10;&#10;Error Display:&#10;when (authState.value) {&#10;    is AuthState.Error -&gt; {&#10;        Toast.makeText(context, authState.value.message, Toast.LENGTH_LONG).show()&#10;    }&#10;    // Other states...&#10;}&#10;```&#10;&#10;================================================================================&#10;9. COMPONENT INTERACTIONS&#10;================================================================================&#10;&#10;NAVIGATION FLOW INTERACTIONS:&#10;&#10;AUTHENTICATION FLOW:&#10;```&#10;Sequence:&#10;1. MainActivity → AuthViewModel.checkAuthStatus()&#10;2. AuthViewModel → Firebase.getCurrentUser()&#10;3. Firebase → AuthViewModel (user status)&#10;4. AuthViewModel → UI State Update&#10;5. MyAppNavigation observes state&#10;6. Navigation decision based on auth state&#10;7. Route to appropriate screen&#10;&#10;Error Handling:&#10;- Network errors → Retry mechanism&#10;- Auth errors → User-friendly messages&#10;- Session expiry → Automatic logout&#10;- Invalid credentials → Error display&#10;```&#10;&#10;DATA FLOW INTERACTIONS:&#10;&#10;CRUD OPERATION FLOW:&#10;```&#10;Create Flow:&#10;1. User fills form → AddScreen&#10;2. Form validation → Client-side checks&#10;3. Submit button → Repository.add()&#10;4. Repository → Firebase.collection().add()&#10;5. Firebase → Success/Error response&#10;6. Repository → UI callback&#10;7. UI → Navigation back with status&#10;8. List screen → Real-time update via listener&#10;&#10;Update Flow:&#10;1. User selects item → Navigate with ID&#10;2. UpdateScreen → Repository.getById()&#10;3. Repository → Firebase.doc().get()&#10;4. Firebase → Document data&#10;5. Repository → UI data display&#10;6. User modifies → Form validation&#10;7. Save button → Repository.update()&#10;8. Repository → Firebase.doc().update()&#10;9. Firebase → Success confirmation&#10;10. UI → Navigation back&#10;11. List updates automatically&#10;```&#10;&#10;REAL-TIME SYNCHRONIZATION:&#10;```&#10;Listener Setup:&#10;1. Screen initialization → Repository.setupListener()&#10;2. Repository → Firebase.collection().addSnapshotListener()&#10;3. Firebase → Real-time data stream&#10;4. Repository → Data transformation&#10;5. Repository → UI state update&#10;6. UI → Automatic recomposition&#10;&#10;Multi-Device Sync:&#10;- Device A updates data&#10;- Firebase propagates change&#10;- Device B listener receives update&#10;- Device B UI automatically updates&#10;- No user intervention required&#10;```&#10;&#10;COMPONENT COMMUNICATION:&#10;&#10;TAB NAVIGATION COMMUNICATION:&#10;```&#10;HomePage Structure:&#10;├── TabView (bottom navigation)&#10;├── NavHost (content area)&#10;│   ├── ClassPage (tab 1)&#10;│   ├── TeacherPage (tab 2)&#10;│   └── UserPage (tab 3)&#10;&#10;Communication:&#10;- TabView state changes → NavHost navigation&#10;- Each tab maintains independent state&#10;- Shared AuthViewModel across all tabs&#10;- Independent navigation stacks per tab&#10;```&#10;&#10;DIALOG INTERACTIONS:&#10;```&#10;Detail Dialog Flow:&#10;1. List item tap → Show dialog&#10;2. Dialog receives item data as parameter&#10;3. Dialog displays formatted information&#10;4. Action buttons → CRUD operations&#10;5. Operations complete → Dialog dismissal&#10;6. Parent screen → Data refresh&#10;&#10;Modal Dialog Benefits:&#10;- Consistent user experience&#10;- Reduced navigation complexity&#10;- Quick information access&#10;- Contextual actions&#10;```&#10;&#10;================================================================================&#10;10. DETAILED CODE EXPLANATIONS&#10;================================================================================&#10;&#10;MAINACTIVITY.KT BREAKDOWN:&#10;```kotlin&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()  // Modern Android full-screen&#10;        val authViewModel: AuthViewModel by viewModels()  // DI&#10;        setContent {&#10;            COMP1786_SU25Theme {  // Material Design theming&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    MyAppNavigation(&#10;                        modifier = Modifier.padding(innerPadding),&#10;                        authViewModel = authViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;Explanation:&#10;- ComponentActivity: Modern activity base class for Compose&#10;- enableEdgeToEdge(): Utilizes full screen real estate&#10;- viewModels(): Automatic ViewModel lifecycle management&#10;- setContent: Replaces traditional setContentView for Compose&#10;- Scaffold: Material Design layout structure&#10;- innerPadding: Handles system UI insets properly&#10;```&#10;&#10;MYAPPNAVIGATION.KT NAVIGATION LOGIC:&#10;```kotlin&#10;@Composable&#10;fun MyAppNavigation(modifier: Modifier = Modifier, authViewModel: AuthViewModel) {&#10;    val navController = rememberNavController()&#10;&#10;    NavHost(navController = navController, startDestination = &quot;intro&quot;) {&#10;        composable(&quot;intro&quot;) {&#10;            IntroPage(modifier, navController, authViewModel)&#10;        }&#10;        composable(&quot;login&quot;) {&#10;            LoginPage(modifier, navController, authViewModel)&#10;        }&#10;        // ... other routes&#10;    }&#10;}&#10;&#10;Explanation:&#10;- NavHost: Container for navigation destinations&#10;- composable(): Defines route-to-screen mappings&#10;- startDestination: Initial screen when app launches&#10;- navController: Manages navigation stack&#10;- Parameter passing through route URLs&#10;```&#10;&#10;AUTHENTICATION LOGIC DETAILED:&#10;```kotlin&#10;class AuthViewModel : ViewModel() {&#10;    private val auth: FirebaseAuth = FirebaseAuth.getInstance()&#10;    private val _authState = MutableLiveData&lt;AuthState&gt;()&#10;    val authState: LiveData&lt;AuthState&gt; = _authState&#10;&#10;    init {&#10;        checkAuthStatus()&#10;    }&#10;&#10;    fun login(email: String, password: String) {&#10;        if (email.isEmpty() || password.isEmpty()) {&#10;            _authState.value = AuthState.Error(&quot;Email and password cannot be empty&quot;)&#10;            return&#10;        }&#10;&#10;        _authState.value = AuthState.Loading&#10;        auth.signInWithEmailAndPassword(email, password)&#10;            .addOnSuccessListener {&#10;                _authState.value = AuthState.Authenticated&#10;            }&#10;            .addOnFailureListener { exception -&gt;&#10;                _authState.value = AuthState.Error(exception.message ?: &quot;Login failed&quot;)&#10;            }&#10;    }&#10;}&#10;&#10;Explanation:&#10;- Singleton Firebase instance for authentication&#10;- LiveData for reactive state management&#10;- Input validation before Firebase calls&#10;- Async operations with callback handling&#10;- User-friendly error message extraction&#10;```&#10;&#10;FIREBASE REPOSITORY PATTERN:&#10;```kotlin&#10;class ClassFirebaseRepository {&#10;    private val db = FirebaseFirestore.getInstance()&#10;    private val classesCollection = db.collection(&quot;classes&quot;)&#10;&#10;    fun getAllClasses(onSuccess: (List&lt;Class&gt;) -&gt; Unit, onError: (String) -&gt; Unit) {&#10;        classesCollection.addSnapshotListener { snapshot, error -&gt;&#10;            if (error != null) {&#10;                onError(error.message ?: &quot;Unknown error&quot;)&#10;                return@addSnapshotListener&#10;            }&#10;&#10;            val classes = snapshot?.documents?.mapNotNull { doc -&gt;&#10;                doc.toObject(Class::class.java)?.copy(id = doc.id)&#10;            } ?: emptyList()&#10;&#10;            onSuccess(classes)&#10;        }&#10;    }&#10;&#10;    fun addClass(classData: Class, onSuccess: () -&gt; Unit, onError: (String) -&gt; Unit) {&#10;        classesCollection.add(classData)&#10;            .addOnSuccessListener { onSuccess() }&#10;            .addOnFailureListener { exception -&gt;&#10;                onError(exception.message ?: &quot;Failed to add class&quot;)&#10;            }&#10;    }&#10;}&#10;&#10;Explanation:&#10;- Firestore instance for database operations&#10;- Collection reference for organized data structure&#10;- Snapshot listeners for real-time updates&#10;- Callback pattern for async operation handling&#10;- Data class mapping with automatic ID assignment&#10;- Error handling with fallback messages&#10;```&#10;&#10;COMPOSE UI COMPONENT STRUCTURE:&#10;```kotlin&#10;@Composable&#10;fun ClassCard(&#10;    classItem: Class,&#10;    onEdit: (String) -&gt; Unit,&#10;    onDelete: (String) -&gt; Unit,&#10;    onViewDetails: (Class) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(8.dp)&#10;            .clickable { onViewDetails(classItem) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = classItem.name,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Text(&#10;                text = &quot;Type: ${classItem.type}&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;            // ... more content&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End&#10;            ) {&#10;                IconButton(onClick = { onEdit(classItem.id) }) {&#10;                    Icon(Icons.Default.Edit, contentDescription = &quot;Edit&quot;)&#10;                }&#10;                IconButton(onClick = { onDelete(classItem.id) }) {&#10;                    Icon(Icons.Default.Delete, contentDescription = &quot;Delete&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;Explanation:&#10;- Composable function with typed parameters&#10;- Material Design Card component&#10;- Modifier for styling and behavior&#10;- Column layout for vertical arrangement&#10;- Material Theme typography and colors&#10;- Lambda functions for event handling&#10;- Accessibility content descriptions&#10;- Responsive layout with Arrangement&#10;```&#10;&#10;================================================================================&#10;11. FEATURE DEMONSTRATIONS&#10;================================================================================&#10;&#10;AUTHENTICATION FEATURES:&#10;&#10;LOGIN FUNCTIONALITY:&#10;```&#10;Feature: User Login with Firebase Authentication&#10;Location: LoginPage.kt&#10;&#10;Demonstration:&#10;1. User opens app → IntroPage displayed&#10;2. Tap &quot;Login&quot; → Navigate to LoginPage&#10;3. Enter email and password&#10;4. Form validation:&#10;   - Empty field check → Error message&#10;   - Invalid email format → Firebase error&#10;   - Wrong credentials → Firebase error message&#10;5. Successful login → Navigate to HomePage&#10;6. Authentication state persisted across app restarts&#10;&#10;UI Elements:&#10;- Email TextField with email keyboard type&#10;- Password TextField with password visibility toggle&#10;- Login Button with loading state&#10;- Error message display area&#10;- &quot;Don't have account?&quot; link to signup&#10;```&#10;&#10;SIGNUP FUNCTIONALITY:&#10;```&#10;Feature: New User Registration&#10;Location: SignupPage.kt&#10;&#10;Demonstration:&#10;1. From IntroPage → Tap &quot;Sign Up&quot;&#10;2. Fill registration form:&#10;   - Email address&#10;   - Password (minimum 6 characters)&#10;   - Confirm password&#10;3. Validation:&#10;   - Password strength checking&#10;   - Password confirmation matching&#10;   - Email format validation&#10;4. Firebase account creation&#10;5. Automatic login after successful signup&#10;6. Navigate to HomePage&#10;&#10;Security Features:&#10;- Password strength indicator&#10;- Email verification (if enabled)&#10;- Duplicate account prevention&#10;- Secure password storage by Firebase&#10;```&#10;&#10;CLASS MANAGEMENT FEATURES:&#10;&#10;CLASS LISTING AND SEARCH:&#10;```&#10;Feature: View and Search Gym Classes&#10;Location: ClassPage.kt&#10;&#10;Demonstration:&#10;1. Navigate to Classes tab&#10;2. View all gym classes in list format&#10;3. Search functionality:&#10;   - Type in search bar&#10;   - Real-time filtering&#10;   - Search by class name, type, or teacher&#10;4. Filter options:&#10;   - Filter by class type (Yoga, Cardio, Strength)&#10;   - Filter by schedule day&#10;   - Filter by available capacity&#10;5. Sort options:&#10;   - Sort by name (A-Z, Z-A)&#10;   - Sort by capacity&#10;   - Sort by schedule time&#10;&#10;Interactive Elements:&#10;- Pull-to-refresh functionality&#10;- Floating Action Button for adding classes&#10;- Long press for context menu&#10;- Tap for detailed view&#10;```&#10;&#10;CLASS CREATION:&#10;```&#10;Feature: Add New Gym Class&#10;Location: AddClassScreen.kt&#10;&#10;Demonstration:&#10;1. From ClassPage → Tap FAB (+ button)&#10;2. Fill class information form:&#10;   - Class name (required)&#10;   - Class type selection from dropdown&#10;   - Duration input with time picker&#10;   - Maximum capacity (1-100)&#10;   - Description text area&#10;   - Teacher assignment from dropdown&#10;   - Schedule day and time selection&#10;3. Form validation:&#10;   - Required field checking&#10;   - Capacity range validation&#10;   - Schedule conflict detection&#10;   - Duplicate name prevention&#10;4. Save to Firebase&#10;5. Return to ClassPage with new class visible&#10;6. Success notification&#10;&#10;Form Features:&#10;- Auto-complete for class types&#10;- Teacher availability checking&#10;- Schedule conflict prevention&#10;- Draft saving for incomplete forms&#10;```&#10;&#10;CLASS EDITING:&#10;```&#10;Feature: Update Existing Class Information&#10;Location: UpdateClassScreen.kt&#10;&#10;Demonstration:&#10;1. From ClassPage → Tap class card → Select &quot;Edit&quot;&#10;2. Navigate to UpdateClassScreen with class ID&#10;3. Form pre-populated with existing data&#10;4. Modify any field:&#10;   - Change class name&#10;   - Update schedule&#10;   - Modify capacity&#10;   - Change assigned teacher&#10;   - Update description&#10;5. Change tracking and validation&#10;6. Save changes to Firebase&#10;7. Navigate back with updated information&#10;8. Real-time update in class list&#10;&#10;Advanced Features:&#10;- Change history tracking&#10;- Conflict resolution for concurrent edits&#10;- Rollback capability&#10;- Change confirmation dialogs&#10;```&#10;&#10;TEACHER MANAGEMENT FEATURES:&#10;&#10;TEACHER PROFILE MANAGEMENT:&#10;```&#10;Feature: Teacher Information System&#10;Location: TeacherPage.kt, AddTeacherScreen.kt, UpdateTeacherScreen.kt&#10;&#10;Demonstration:&#10;1. Navigate to Teachers tab&#10;2. View teacher profiles with:&#10;   - Profile photo&#10;   - Name and contact information&#10;   - Specialization badges&#10;   - Experience level&#10;   - Bio information&#10;   - Assigned classes list&#10;3. Add new teacher:&#10;   - Personal information form&#10;   - Contact details&#10;   - Specialization selection&#10;   - Experience input&#10;   - Bio text area&#10;   - Profile photo upload&#10;4. Edit teacher information:&#10;   - Update contact details&#10;   - Modify specializations&#10;   - Update experience&#10;   - Change profile photo&#10;   - Edit bio&#10;&#10;Profile Features:&#10;- Photo upload and cropping&#10;- Specialization badge system&#10;- Experience level indicators&#10;- Contact verification&#10;- Assignment history tracking&#10;```&#10;&#10;USER MANAGEMENT FEATURES:&#10;&#10;MEMBER MANAGEMENT SYSTEM:&#10;```&#10;Feature: Gym Member Administration&#10;Location: UserPage.kt, UpdateUserScreen.kt&#10;&#10;Demonstration:&#10;1. Navigate to Users tab&#10;2. View member profiles:&#10;   - Personal information&#10;   - Membership type and status&#10;   - Join date and renewal info&#10;   - Contact details&#10;   - Emergency contact&#10;   - Class enrollment history&#10;3. Update member information:&#10;   - Contact detail changes&#10;   - Membership type updates&#10;   - Emergency contact updates&#10;   - Notes and special requirements&#10;4. Membership management:&#10;   - Renewal date tracking&#10;   - Payment status&#10;   - Access level management&#10;   - Suspension/activation&#10;&#10;Member Features:&#10;- Membership tier system&#10;- Auto-renewal notifications&#10;- Payment history tracking&#10;- Class booking integration&#10;- Emergency contact verification&#10;```&#10;&#10;COURSE DETAIL FEATURES:&#10;&#10;DETAILED CLASS INFORMATION:&#10;```&#10;Feature: Comprehensive Class Details&#10;Location: AddClassDetailScreen.kt, UpdateClassDetailScreen.kt&#10;&#10;Demonstration:&#10;1. From class management → Add course details&#10;2. Enhanced class information:&#10;   - Detailed schedule (multiple sessions)&#10;   - Prerequisites and requirements&#10;   - Equipment needed&#10;   - Difficulty level&#10;   - Special instructions&#10;   - Pricing information&#10;   - Booking policies&#10;3. Session management:&#10;   - Multiple session scheduling&#10;   - Recurring class setup&#10;   - Holiday schedule adjustments&#10;   - Makeup session policies&#10;&#10;Detail Features:&#10;- Multi-session scheduling&#10;- Equipment requirement tracking&#10;- Prerequisite management&#10;- Difficulty level system&#10;- Special accommodation notes&#10;```&#10;&#10;================================================================================&#10;12. TROUBLESHOOTING &amp; ERROR ANALYSIS&#10;================================================================================&#10;&#10;COMMON COMPILATION ERRORS AND SOLUTIONS:&#10;&#10;ERROR 1: &quot;No parameter with name 'classId' found&quot;&#10;Location: ClassPage.kt:609:33&#10;```&#10;Problem: Navigation parameter mismatch&#10;Cause: UpdateClassDetailScreen expecting 'classId' parameter but route not providing it&#10;&#10;Solution:&#10;Check navigation route definition in MyAppNavigation.kt:&#10;- Ensure route includes {classId} parameter&#10;- Verify parameter extraction in destination screen&#10;- Match parameter names exactly&#10;&#10;Fix Example:&#10;// In MyAppNavigation.kt&#10;composable(&#10;    route = &quot;update_class_detail/{classId}/{courseId}/{detailId}&quot;,&#10;    arguments = listOf(&#10;        navArgument(&quot;classId&quot;) { type = NavType.StringType }&#10;    )&#10;) { backStackEntry -&gt;&#10;    val classId = backStackEntry.arguments?.getString(&quot;classId&quot;)&#10;    UpdateClassDetailScreen(navController, classId, ...)&#10;}&#10;```&#10;&#10;ERROR 2: &quot;No parameter with name 'topAppBar' found&quot;&#10;Location: ClassPage.kt:114:9&#10;```&#10;Problem: Scaffold parameter mismatch&#10;Cause: Incorrect Scaffold parameter usage&#10;&#10;Solution:&#10;Update Scaffold usage to correct Material3 syntax:&#10;// Old (incorrect):&#10;Scaffold(topAppBar = { ... })&#10;&#10;// New (correct):&#10;Scaffold(&#10;    topBar = { ... }&#10;)&#10;```&#10;&#10;ERROR 3: &quot;Unresolved reference 'AccessTime', 'Group', 'School'&quot;&#10;Location: ClassDetailsDialog.kt, TeacherDetailsDialog.kt&#10;```&#10;Problem: Missing Material Icons imports&#10;Cause: Icons not imported from Material Icons library&#10;&#10;Solution:&#10;Add proper imports:&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AccessTime&#10;import androidx.compose.material.icons.filled.Group&#10;import androidx.compose.material.icons.filled.School&#10;&#10;// Or use alternative icons:&#10;import androidx.compose.material.icons.filled.Schedule&#10;import androidx.compose.material.icons.filled.People&#10;import androidx.compose.material.icons.filled.Business&#10;```&#10;&#10;ERROR 4: &quot;ClassNotFoundException: GymAppApplication&quot;&#10;```&#10;Problem: Missing Application class reference&#10;Cause: AndroidManifest.xml references non-existent Application class&#10;&#10;Solution:&#10;Remove GymAppApplication references:&#10;1. Delete GymAppApplication.kt file&#10;2. Update AndroidManifest.xml:&#10;   Remove: android:name=&quot;.GymAppApplication&quot;&#10;3. Remove SQLite and sync dependencies if not needed&#10;4. Clean and rebuild project&#10;```&#10;&#10;FIREBASE INTEGRATION ISSUES:&#10;&#10;AUTHENTICATION PROBLEMS:&#10;```&#10;Common Issues:&#10;1. google-services.json missing or incorrect&#10;2. Firebase project configuration mismatch&#10;3. Authentication method not enabled in Firebase Console&#10;4. Network connectivity issues&#10;&#10;Debugging Steps:&#10;1. Verify google-services.json in app/ directory&#10;2. Check Firebase Console for project settings&#10;3. Enable Email/Password authentication&#10;4. Test with Firebase Authentication emulator&#10;5. Check network permissions in AndroidManifest.xml&#10;&#10;Solutions:&#10;- Re-download google-services.json from Firebase Console&#10;- Verify package name matches Firebase project&#10;- Enable authentication methods in Firebase Console&#10;- Add internet permission: &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;```&#10;&#10;FIRESTORE DATA ISSUES:&#10;```&#10;Common Problems:&#10;1. Firestore rules too restrictive&#10;2. Document structure mismatch&#10;3. Missing collection initialization&#10;4. Network timeout issues&#10;&#10;Debugging Approach:&#10;1. Check Firestore security rules&#10;2. Verify document field names match data classes&#10;3. Initialize collections with test data&#10;4. Monitor Firebase Console for errors&#10;5. Use Firebase emulator for local testing&#10;&#10;Rule Examples:&#10;// Development rules (allow all):&#10;rules_version = '2';&#10;service cloud.firestore {&#10;  match /databases/{database}/documents {&#10;    match /{document=**} {&#10;      allow read, write: if request.auth != null;&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;UI AND NAVIGATION ISSUES:&#10;&#10;COMPOSE RECOMPOSITION PROBLEMS:&#10;```&#10;Issues:&#10;1. Excessive recomposition&#10;2. State not updating&#10;3. Memory leaks with observers&#10;&#10;Solutions:&#10;1. Use remember for stable state&#10;2. Implement proper key in LazyColumn&#10;3. Use derivedStateOf for computed values&#10;4. Dispose observers properly&#10;&#10;Best Practices:&#10;@Composable&#10;fun MyScreen() {&#10;    val state by remember { mutableStateOf(initialValue) }&#10;    val derivedValue by remember(state) {&#10;        derivedStateOf { computeValue(state) }&#10;    }&#10;    &#10;    DisposableEffect(Unit) {&#10;        onDispose { &#10;            // Cleanup listeners&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;NAVIGATION STACK ISSUES:&#10;```&#10;Problems:&#10;1. Navigation stack corruption&#10;2. Parameter passing failures&#10;3. Back navigation issues&#10;&#10;Solutions:&#10;1. Use popBackStack() properly&#10;2. Validate parameters before navigation&#10;3. Handle navigation edge cases&#10;&#10;Navigation Best Practices:&#10;// Safe navigation with parameter validation&#10;fun navigateToUpdate(id: String?) {&#10;    if (!id.isNullOrEmpty()) {&#10;        navController.navigate(&quot;update/$id&quot;)&#10;    } else {&#10;        // Handle error case&#10;        showError(&quot;Invalid ID&quot;)&#10;    }&#10;}&#10;```&#10;&#10;PERFORMANCE OPTIMIZATION:&#10;&#10;MEMORY MANAGEMENT:&#10;```&#10;Issues:&#10;1. Memory leaks from listeners&#10;2. Large image loading&#10;3. Inefficient list rendering&#10;&#10;Solutions:&#10;1. Properly dispose Firebase listeners&#10;2. Use image loading libraries (Coil)&#10;3. Implement lazy loading for large lists&#10;4. Use remember for expensive calculations&#10;&#10;Implementation:&#10;// Proper listener disposal&#10;@Composable&#10;fun DataScreen() {&#10;    DisposableEffect(Unit) {&#10;        val listener = repository.addDataListener { data -&gt;&#10;            // Handle data&#10;        }&#10;        &#10;        onDispose {&#10;            repository.removeListener(listener)&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;TESTING AND DEBUGGING:&#10;&#10;DEBUG STRATEGIES:&#10;```&#10;1. Use Log.d() for debugging data flow&#10;2. Firebase Console for backend monitoring&#10;3. Layout Inspector for UI debugging&#10;4. Profiler for performance analysis&#10;&#10;Logging Example:&#10;class Repository {&#10;    fun fetchData() {&#10;        Log.d(&quot;Repository&quot;, &quot;Starting data fetch&quot;)&#10;        firestore.collection(&quot;data&quot;).get()&#10;            .addOnSuccess { &#10;                Log.d(&quot;Repository&quot;, &quot;Data fetched successfully: ${it.size()} items&quot;)&#10;            }&#10;            .addOnFailure { &#10;                Log.e(&quot;Repository&quot;, &quot;Data fetch failed&quot;, it)&#10;            }&#10;    }&#10;}&#10;```&#10;&#10;DEPLOYMENT ISSUES:&#10;&#10;BUILD AND RELEASE:&#10;```&#10;Common Problems:&#10;1. Signing key issues&#10;2. ProGuard obfuscation problems&#10;3. Missing permissions&#10;4. Version compatibility issues&#10;&#10;Solutions:&#10;1. Generate proper release keystore&#10;2. Configure ProGuard rules for Firebase&#10;3. Declare all required permissions&#10;4. Test on multiple Android versions&#10;&#10;ProGuard Rules for Firebase:&#10;-keep class com.google.firebase.** { *; }&#10;-keep class com.google.android.gms.** { *; }&#10;-keepattributes Signature&#10;-keepattributes *Annotation*&#10;```&#10;&#10;RECOMMENDED DEVELOPMENT PRACTICES:&#10;&#10;1. VERSION CONTROL:&#10;   - Use Git with proper .gitignore&#10;   - Exclude google-services.json from version control for security&#10;   - Use environment-specific configuration files&#10;&#10;2. ERROR HANDLING:&#10;   - Implement global error handling&#10;   - Use sealed classes for state management&#10;   - Provide user-friendly error messages&#10;&#10;3. TESTING:&#10;   - Write unit tests for ViewModels&#10;   - Use Firebase emulator for testing&#10;   - Implement UI tests with Compose Testing&#10;&#10;4. SECURITY:&#10;   - Keep Firebase keys secure&#10;   - Implement proper authentication checks&#10;   - Use Firestore security rules effectively&#10;&#10;5. PERFORMANCE:&#10;   - Monitor app performance with Firebase Performance&#10;   - Optimize image loading and caching&#10;   - Use efficient data structures&#10;&#10;This comprehensive analysis covers every aspect of your Android gym management system, from high-level architecture to detailed troubleshooting guides. The system demonstrates modern Android development practices using Jetpack Compose, Firebase integration, and MVVM architecture patterns." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PROJECT_ANALYSIS.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PROJECT_ANALYSIS.txt" />
              <option name="updatedContent" value="# GYM MANAGEMENT SYSTEM - PROJECT ANALYSIS&#10;&#10;## Per-file Overview&#10;&#10;### Core Application Files&#10;- **MainActivity.kt**: Entry point of the application that sets up the Compose UI, initializes the app environment, and hosts the navigation framework.&#10;- **MyAppNavigation.kt**: Central navigation controller that manages routing between different screens based on authentication state and user actions.&#10;- **AuthViewModel.kt**: Manages authentication state, handles login/registration logic, and maintains Firebase Auth connection.&#10;&#10;### User Interface - Pages&#10;- **pages/HomePage.kt**: Main dashboard that presents an overview of the gym system with quick access to key features.&#10;- **Site_pages/ClassPage.kt**: Primary interface for class management, displaying available classes and providing CRUD options.&#10;- **Site_pages/TeacherPage.kt**: Handles teacher information display and management functionality.&#10;- **Site_pages/UserPage.kt**: Manages gym member profiles and account information.&#10;&#10;### CRUD Functional Screens&#10;- **functionPages/Class/AddClassScreen.kt**: Form interface for creating new gym classes.&#10;- **functionPages/Class/UpdateClassScreen.kt**: Edits existing class information with validation.&#10;- **functionPages/Teacher/AddTeacherScreen.kt**: Interface for adding new teacher profiles.&#10;- **functionPages/Teacher/UpdateTeacherScreen.kt**: Edits teacher information with form validation.&#10;- **functionPages/Teacher/TeacherDetailsDialog.kt**: Modal popup showing comprehensive teacher information.&#10;- **functionPages/User/UpdateUserDialog.kt**: Dialog for editing user information.&#10;- **functionPages/User/UserDetailDialog.kt**: Displays detailed user information in a modal.&#10;- **functionPages/Courses/AddClassDetailScreen.kt**: Form for creating detailed course information.&#10;- **functionPages/Courses/UpdateClassDetailScreen.kt**: Updates course details and schedules.&#10;- **functionPages/Courses/ClassDetailsDialog.kt**: Modal with comprehensive course information.&#10;&#10;### Data Management&#10;- **controllers/classFirebaseRepository.kt**: Handles CRUD operations for class data in Firebase Firestore.&#10;- **controllers/teacherFirebaseRepository.kt**: Manages teacher data operations with Firebase integration.&#10;- **controllers/userFirebaseRepository.kt**: Handles user profile data operations and authentication state.&#10;&#10;### UI Components&#10;- **components/**: Collection of reusable UI elements like buttons, cards, and form fields.&#10;- **tabview/TabView.kt**: Bottom navigation component for switching between main app sections.&#10;- **ui/theme/Color.kt**: Color palette definitions for consistent UI theming.&#10;- **ui/theme/Theme.kt**: Material theme configuration for the application.&#10;- **ui/theme/Type.kt**: Typography settings for text styling throughout the app.&#10;&#10;## High-level Workflow&#10;&#10;1. **Application Initialization**:&#10;   - MainActivity launches and initializes the Compose UI environment&#10;   - AuthViewModel checks Firebase authentication status&#10;   - MyAppNavigation routes the user to either login screens or the main application&#10;&#10;2. **Authentication Flow**:&#10;   - New users register with email/password&#10;   - Existing users authenticate via login screen&#10;   - Auth state is maintained across app sessions&#10;&#10;3. **Main Application Flow**:&#10;   - Authenticated users land on HomePage dashboard&#10;   - TabView provides navigation between main sections (Classes, Teachers, Users)&#10;   - Each section offers list views with CRUD operations&#10;   - Detail dialogs provide comprehensive information&#10;   - Add/Update screens handle data modifications&#10;&#10;4. **Data Operations**:&#10;   - User interactions trigger ViewModel functions&#10;   - ViewModels delegate to appropriate Firebase repositories&#10;   - Repositories handle Firestore transactions&#10;   - Real-time updates flow back through the same path to refresh UI&#10;&#10;## Key Components&#10;&#10;1. **Authentication System**:&#10;   - Firebase Authentication integration&#10;   - User registration and login flows&#10;   - Persistent authentication state&#10;&#10;2. **Navigation Framework**:&#10;   - Jetpack Compose Navigation&#10;   - Tab-based section navigation&#10;   - Conditional routing based on auth state&#10;   - Deep linking capabilities&#10;&#10;3. **Data Management**:&#10;   - Firebase Firestore repositories&#10;   - CRUD operations for all entities&#10;   - Real-time data synchronization&#10;   - Data validation and error handling&#10;&#10;4. **UI Architecture**:&#10;   - Jetpack Compose UI toolkit&#10;   - Material Design implementation&#10;   - Responsive layouts&#10;   - Reusable component library&#10;&#10;## Data Flow &amp; Dependencies&#10;&#10;1. **UI Layer → ViewModel**:&#10;   - User interactions in Compose UI components trigger ViewModel functions&#10;   - ViewModels maintain UI state and handle business logic&#10;&#10;2. **ViewModel → Repositories**:&#10;   - ViewModels delegate data operations to Firebase repositories&#10;   - Repositories abstract Firestore implementation details&#10;&#10;3. **Repositories → Firebase**:&#10;   - Repositories perform CRUD operations on Firestore collections&#10;   - Real-time listeners maintain data synchronization&#10;&#10;4. **Firebase → Repositories → ViewModel → UI**:&#10;   - Data changes in Firestore propagate through repositories&#10;   - ViewModels update state based on repository events&#10;   - Compose UI automatically recomposes based on state changes&#10;&#10;5. **Cross-component Dependencies**:&#10;   - Navigation controller depends on authentication state&#10;   - Entity relationships (Classes reference Teachers, Users enroll in Classes)&#10;   - Shared UI components maintain visual consistency&#10;&#10;## Potential Improvements&#10;&#10;1. **Offline Capability Enhancement**:&#10;   - Implement Room database as a local cache&#10;   - Add synchronization logic for offline changes&#10;   - Provide clear indicators of offline status to users&#10;&#10;2. **Performance Optimization**:&#10;   - Implement pagination for large data lists&#10;   - Add lazy loading patterns for media content&#10;   - Optimize Compose recomposition with remember/mutableState&#10;&#10;3. **Security Enhancements**:&#10;   - Add more granular Firebase security rules&#10;   - Implement role-based access control&#10;   - Add data validation on both client and server sides&#10;&#10;4. **Testing Framework**:&#10;   - Add unit tests for ViewModels and Repositories&#10;   - Implement UI tests with Compose testing libraries&#10;   - Create integration tests for full user flows&#10;&#10;5. **User Experience Refinements**:&#10;   - Add comprehensive error handling with user-friendly messages&#10;   - Implement analytics to identify usability bottlenecks&#10;   - Add accessibility features for diverse user needs" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>